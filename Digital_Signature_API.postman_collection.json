{
  "info": {
    "name": "Digital Signature API",
    "description": "Collection untuk testing Digital Signature API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "digital-signature-api"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "keypair_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "document_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "public_key",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has uid and email\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('uid');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register",
              "host": ["{{base_url}}"],
              "path": ["register"]
            },
            "description": "Registrasi user baru"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Key Management",
      "item": [
        {
          "name": "Generate Key Pair",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has id and publicKey\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('publicKey');",
                  "    ",
                  "    // Set variables for later use",
                  "    pm.collectionVariables.set('keypair_id', jsonData.id);",
                  "    pm.collectionVariables.set('public_key', jsonData.publicKey);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/KeyGen",
              "host": ["{{base_url}}"],
              "path": ["KeyGen"]
            },
            "description": "Generate RSA 2048-bit key pair"
          },
          "response": []
        },
        {
          "name": "Get My Keys",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each key has required properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('userId');",
                  "        pm.expect(jsonData[0]).to.have.property('publicKey');",
                  "        pm.expect(jsonData[0]).to.have.property('createdAt');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/my-keys",
              "host": ["{{base_url}}"],
              "path": ["my-keys"]
            },
            "description": "Mengambil semua key pairs milik user"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Document Signing",
      "item": [
        {
          "name": "Sign Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has signature data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('fileName');",
                  "    pm.expect(jsonData).to.have.property('signature');",
                  "    ",
                  "    // Set document_id for verification",
                  "    pm.collectionVariables.set('document_id', jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "keyPairId",
                  "value": "{{keypair_id}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/sign",
              "host": ["{{base_url}}"],
              "path": ["sign"]
            },
            "description": "Menandatangani dokumen dengan key pair"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Verification",
      "item": [
        {
          "name": "Verify Signature",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has verification result\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('verify');",
                  "    pm.expect(jsonData).to.have.property('fileName');",
                  "    pm.expect(jsonData).to.have.property('signature');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"documentId\": \"{{document_id}}\",\n  \"publicKey\": \"{{public_key}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/verify",
              "host": ["{{base_url}}"],
              "path": ["verify"]
            },
            "description": "Verifikasi digital signature (endpoint publik)"
          },
          "response": []
        },
        {
          "name": "Get Document Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has document metadata\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('fileName');",
                  "    pm.expect(jsonData).to.have.property('originalName');",
                  "    pm.expect(jsonData).to.have.property('signature');",
                  "    pm.expect(jsonData).to.have.property('signedBy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/documents/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["documents", "{{document_id}}"]
            },
            "description": "Mengambil metadata dokumen (endpoint publik)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
} 